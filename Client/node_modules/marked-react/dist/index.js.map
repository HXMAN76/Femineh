{"version":3,"sources":["../src/Markdown.ts","../src/helpers.ts","../src/ReactParser.ts","../src/ReactRenderer.ts","../src/index.ts"],"sourcesContent":["import { createElement, Fragment } from 'react';\nimport { Marked, MarkedOptions } from 'marked';\n\nimport ReactParser from './ReactParser';\nimport ReactRenderer, { ReactRendererOptions } from './ReactRenderer';\n\ntype LexerOptions = Pick<MarkedOptions, 'breaks' | 'gfm'>;\n\nexport interface MarkdownProps extends ReactRendererOptions, LexerOptions {\n  value?: string;\n  children?: string;\n  isInline?: boolean;\n  instance?: Marked;\n}\n\nconst validateComponentProps = (props: MarkdownProps) => {\n  if (props.value && typeof props.value !== 'string') {\n    throw new TypeError(`[marked-react]: Expected value to be of type string but got ${typeof props.value}`);\n  }\n\n  if (props.children && typeof props.children !== 'string') {\n    throw new TypeError(`[marked-react]: Expected children to be of type string but got ${typeof props.children}`);\n  }\n};\n\nconst defaultProps = {\n  isInline: false,\n  breaks: false,\n  gfm: true,\n  baseURL: undefined,\n  openLinksInNewTab: true,\n  langPrefix: 'language-',\n  renderer: undefined,\n};\n\nconst markedInstance = new Marked();\n\nconst Markdown = (props: MarkdownProps) => {\n  validateComponentProps(props);\n\n  const options = { ...defaultProps, ...props };\n  const marked = options.instance ?? markedInstance;\n\n  // lexer options\n  const lexerOptions = {\n    breaks: options.breaks,\n    gfm: options.gfm,\n  };\n\n  // convert input markdown into tokens\n  const markdownString = options.value ?? options.children ?? '';\n\n  const tokens = options.isInline\n    ? marked.Lexer.lexInline(markdownString, lexerOptions)\n    : marked.lexer(markdownString, lexerOptions);\n\n  // parser options\n  const parserOptions = {\n    renderer: new ReactRenderer({\n      renderer: options.renderer,\n      baseURL: options.baseURL,\n      openLinksInNewTab: options.openLinksInNewTab,\n      langPrefix: options.langPrefix,\n    }),\n  };\n\n  const parser = new ReactParser(parserOptions);\n  const children = options.isInline ? parser.parseInline(tokens) : parser.parse(tokens);\n\n  return createElement(Fragment, null, children);\n};\n\nexport default Markdown;\n","const htmlUnescapes: Record<string, string> = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\",\n};\n\n/** Used to match HTML entities and HTML characters. */\nconst reEscapedHtml = /&(?:amp|lt|gt|quot|#(?:0+)?39);/g;\nconst reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\nexport const unescape = (str = '') => {\n  return reHasEscapedHtml.test(str) ? str.replace(reEscapedHtml, (entity) => htmlUnescapes[entity] || \"'\") : str;\n};\n\nexport const joinBase = (path: string, base?: string) => {\n  if (!base) {\n    return path;\n  }\n\n  try {\n    return new URL(path, base).href;\n  } catch {\n    return path;\n  }\n};\n","import { ReactNode } from 'react';\nimport type { Token, Tokens } from 'marked';\n\nimport ReactRenderer, { HeadingLevels } from './ReactRenderer';\nimport { unescape } from './helpers';\n\ninterface ReactParserOptions {\n  renderer: ReactRenderer;\n}\n\nclass ReactParser {\n  renderer: ReactRenderer;\n\n  constructor(options: ReactParserOptions) {\n    this.renderer = options.renderer;\n  }\n\n  parse(tokens: Token[]): ReactNode[] {\n    return tokens.map((token) => {\n      switch (token.type) {\n        case 'space': {\n          return null;\n        }\n\n        case 'heading': {\n          const level = token.depth as HeadingLevels;\n          return this.renderer.heading(this.parseInline(token.tokens), level);\n        }\n\n        case 'paragraph': {\n          return this.renderer.paragraph(this.parseInline(token.tokens));\n        }\n\n        case 'text': {\n          const textToken = token as Tokens.Text;\n          return textToken.tokens ? this.parseInline(textToken.tokens) : token.text;\n        }\n\n        case 'blockquote': {\n          const blockquoteToken = token as Tokens.Blockquote;\n          const quote = this.parse(blockquoteToken.tokens);\n          return this.renderer.blockquote(quote);\n        }\n\n        case 'list': {\n          const listToken = token as Tokens.List;\n\n          const children = listToken.items.map((item) => {\n            const listItemChildren = [];\n\n            if (item.task) {\n              listItemChildren.push(this.renderer.checkbox(item.checked ?? false));\n            }\n\n            listItemChildren.push(this.parse(item.tokens));\n\n            return this.renderer.listItem(listItemChildren);\n          });\n\n          return this.renderer.list(children, token.ordered, token.ordered ? token.start : undefined);\n        }\n\n        case 'code': {\n          return this.renderer.code(token.text, token.lang);\n        }\n\n        case 'html': {\n          return this.renderer.html(token.text);\n        }\n\n        case 'table': {\n          const tableToken = token as Tokens.Table;\n          const headerCells = tableToken.header.map((cell, index) => {\n            return this.renderer.tableCell(this.parseInline(cell.tokens), { header: true, align: token.align[index] });\n          });\n\n          const headerRow = this.renderer.tableRow(headerCells);\n          const header = this.renderer.tableHeader(headerRow);\n\n          const bodyChilren = tableToken.rows.map((row) => {\n            const rowChildren = row.map((cell, index) => {\n              return this.renderer.tableCell(this.parseInline(cell.tokens), {\n                header: false,\n                align: token.align[index],\n              });\n            });\n\n            return this.renderer.tableRow(rowChildren);\n          });\n\n          const body = this.renderer.tableBody(bodyChilren);\n\n          return this.renderer.table([header, body]);\n        }\n\n        case 'hr': {\n          return this.renderer.hr();\n        }\n\n        default: {\n          console.warn(`Token with \"${token.type}\" type was not found`); // eslint-disable-line no-console\n          return null;\n        }\n      }\n    });\n  }\n\n  parseInline(tokens: Token[] = []): ReactNode[] {\n    return tokens.map((token) => {\n      switch (token.type) {\n        case 'text': {\n          return this.renderer.text(unescape(token.text));\n        }\n\n        case 'strong': {\n          return this.renderer.strong(this.parseInline(token.tokens));\n        }\n\n        case 'em': {\n          return this.renderer.em(this.parseInline(token.tokens));\n        }\n\n        case 'del': {\n          return this.renderer.del(this.parseInline(token.tokens));\n        }\n\n        case 'codespan': {\n          return this.renderer.codespan(unescape(token.text));\n        }\n\n        case 'link': {\n          return this.renderer.link(token.href, this.parseInline(token.tokens));\n        }\n\n        case 'image': {\n          return this.renderer.image(token.href, token.text, token.title);\n        }\n\n        case 'html': {\n          return this.renderer.html(token.text);\n        }\n\n        case 'br': {\n          return this.renderer.br();\n        }\n\n        case 'escape': {\n          return this.renderer.text(token.text);\n        }\n\n        default: {\n          console.warn(`Token with \"${token.type}\" type was not found`); // eslint-disable-line no-console\n          return null;\n        }\n      }\n    });\n  }\n}\n\nexport default ReactParser;\n","import { createElement, ElementType, ReactElement, ReactNode } from 'react';\n\nimport { joinBase } from './helpers';\n\nexport type HeadingLevels = 1 | 2 | 3 | 4 | 5 | 6;\nexport interface TableFlags {\n  header?: boolean;\n  align?: 'center' | 'left' | 'right' | null;\n}\n\nexport type CustomReactRenderer = Partial<ReactRenderer>;\nexport type RendererMethods = keyof ReactRenderer;\n\nexport interface ReactRendererOptions {\n  baseURL?: string;\n  openLinksInNewTab?: boolean;\n  langPrefix?: string;\n  renderer?: CustomReactRenderer;\n}\n\nclass ReactRenderer {\n  #elId = 0;\n  #options: ReactRendererOptions;\n\n  constructor(options: ReactRendererOptions = {}) {\n    const { renderer } = options;\n\n    this.#options = options;\n\n    if (renderer && typeof renderer === 'object') {\n      Object.entries(renderer as ReactRenderer).forEach(([key, value]) => {\n        const rendererName = key as keyof ReactRenderer;\n        const rendererFunction = value;\n\n        if (!this[rendererName] || rendererName === 'elementId' || typeof rendererFunction !== 'function') {\n          return;\n        }\n\n        const originalFunction = this[rendererName];\n\n        this[rendererName] = <T extends typeof originalFunction>(...args: Parameters<T>) => {\n          this.#incrementElId();\n          return rendererFunction.apply(this, args);\n        };\n      });\n    }\n  }\n\n  #h<T extends ElementType>(el: T, children: ReactNode = null, props = {}): ReactElement {\n    const elProps = {\n      key: `marked-react-${this.elementId}`,\n    };\n\n    this.#incrementElId();\n    return createElement(el, { ...props, ...elProps }, children);\n  }\n\n  #incrementElId() {\n    this.#elId += 1;\n  }\n\n  get elementId() {\n    return this.#elId;\n  }\n\n  heading(children: ReactNode, level: HeadingLevels) {\n    return this.#h(`h${level}`, children);\n  }\n\n  paragraph(children: ReactNode) {\n    return this.#h('p', children);\n  }\n\n  link(href: string, text: ReactNode) {\n    const url = joinBase(href, this.#options.baseURL);\n    const target = this.#options.openLinksInNewTab ? '_blank' : null;\n    return this.#h('a', text, { href: url, target });\n  }\n\n  image(src: string, alt: string, title: string | null = null) {\n    const url = joinBase(src, this.#options.baseURL);\n    return this.#h('img', null, { src: url, alt, title });\n  }\n\n  codespan(code: ReactNode, lang: string | null = null) {\n    const className = lang ? `${this.#options.langPrefix}${lang}` : null;\n    return this.#h('code', code, { className });\n  }\n\n  code(code: ReactNode, lang: string | undefined) {\n    return this.#h('pre', this.codespan(code, lang));\n  }\n\n  blockquote(children: ReactNode) {\n    return this.#h('blockquote', children);\n  }\n\n  list(children: ReactNode, ordered: boolean, start: number | undefined) {\n    return this.#h(ordered ? 'ol' : 'ul', children, ordered && start !== 1 ? { start } : {});\n  }\n\n  listItem(children: ReactNode[]) {\n    return this.#h('li', children);\n  }\n\n  checkbox(checked: ReactNode) {\n    return this.#h('input', null, { type: 'checkbox', disabled: true, checked });\n  }\n\n  table(children: ReactNode[]) {\n    return this.#h('table', children);\n  }\n\n  tableHeader(children: ReactNode) {\n    return this.#h('thead', children);\n  }\n\n  tableBody(children: ReactNode[]) {\n    return this.#h('tbody', children);\n  }\n\n  tableRow(children: ReactNode[]) {\n    return this.#h('tr', children);\n  }\n\n  tableCell(children: ReactNode[], flags: TableFlags) {\n    const tag = flags.header ? 'th' : 'td';\n    return this.#h(tag, children, { align: flags.align });\n  }\n\n  strong(children: ReactNode) {\n    return this.#h('strong', children);\n  }\n\n  em(children: ReactNode) {\n    return this.#h('em', children);\n  }\n\n  del(children: ReactNode) {\n    return this.#h('del', children);\n  }\n\n  text(text: ReactNode) {\n    return text;\n  }\n\n  html(html: ReactNode) {\n    return html;\n  }\n\n  hr() {\n    return this.#h('hr');\n  }\n\n  br() {\n    return this.#h('br');\n  }\n}\n\nexport default ReactRenderer;\n","import Markdown from './Markdown';\n\nexport { default as ReactParser } from './ReactParser';\nexport { default as ReactRenderer } from './ReactRenderer';\nexport default Markdown;\n"],"mappings":"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","names":["createElement","createElement"]}